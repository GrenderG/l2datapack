class guardian_basilisk : warrior_passive
{
handler:
    EventHandler MY_DYING(c1)
    {
        c1 = GetLastAttacker();
        if (HaveMemo(c1, @testimoney_of_trust) && GetMemoState(c1, @testimoney_of_trust) == 6 && OwnItemCount(c1, @blood_of_guardian_basilisk) < 10 && OwnItemCount(c1, @order_of_clayton) && OwnItemCount(c1, @basilisk_plasma) == 0)
        {
            if (OwnItemCount(c1, @blood_of_guardian_basilisk) == 9)
            {
                GiveItem1(c1, @basilisk_plasma, 1);
                DeleteItem1(c1, @blood_of_guardian_basilisk, OwnItemCount(c1, @blood_of_guardian_basilisk));
                SoundEffect(c1, "Itemsound.quest_middle");
            }
            else
            {
                GiveItem1(c1, @blood_of_guardian_basilisk, 1);
                SoundEffect(c1, "Itemsound.quest_itemget");
            }
        }

        c1 = GetLastAttacker();
        if (HaveMemo(c1, @testimony_of_glory) && OwnItemCount(c1, @vokiyans_order1) && OwnItemCount(c1, @guardian_basilisk_fang) < 10)
        {
            if (Rand(20) < 10)
            {
                if (OwnItemCount(c1, @guardian_basilisk_fang) == 9)
                {
                    GiveItem1(c1, @guardian_basilisk_fang, 1);
                    SoundEffect(c1, "Itemsound.quest_middle");
                }
                else
                {
                    GiveItem1(c1, @guardian_basilisk_fang, 1);
                    SoundEffect(c1, "Itemsound.quest_itemget");
                }
            }
        }

        c1 = GetLastAttacker();
        if (HaveMemo(c1, @testimony_of_life) && OwnItemCount(c1, @moonflower_charm) == 1 && OwnItemCount(c1, @pushkins_list) == 1 && OwnItemCount(c1, @pure_mithril_ore) < 10)
        {
            if (Rand(100) < 50)
            {
                if (1)
                {
                    c1.quest_last_reward_time = GetCurrentTick();
                    GiveItem1(c1, @pure_mithril_ore, 1);
                    if (OwnItemCount(c1, @pure_mithril_ore) >= 10)
                    {
                        SoundEffect(c1, "ItemSound.quest_middle");
                    }
                    else
                    {
                        SoundEffect(c1, "ItemSound.quest_itemget");
                    }
                }
            }
        }

        c1 = GetLastAttacker();
        if (1)
        {
            c1.quest_last_reward_time = GetCurrentTick();
            if (HaveMemo(c1, @song_of_hunters) && OwnItemCount(c1, @q_test_instructions_1) && OwnItemCount(c1, @q_g_basil_scale) < 40)
            {
                if (Rand(100) < 75)
                {
                    GiveItem1(c1, @q_g_basil_scale, 1);
                    if (OwnItemCount(c1, @q_g_basil_scale) >= 40)
                    {
                        SoundEffect(c1, "ItemSound.quest_middle");
                    }
                    else
                    {
                        SoundEffect(c1, "ItemSound.quest_itemget");
                    }
                }
            }

            if (HaveMemo(c1, @song_of_hunters) && OwnItemCount(c1, @q_request_1c_6) && OwnItemCount(c1, @q_grd_basilisk_talon) < 100)
            {
                if (Rand(2) == 0)
                {
                    GiveItem1(c1, @q_grd_basilisk_talon, 2);
                    if (OwnItemCount(c1, @q_grd_basilisk_talon) >= 100)
                    {
                        SoundEffect(c1, "ItemSound.quest_middle");
                    }
                    else
                    {
                        SoundEffect(c1, "ItemSound.quest_itemget");
                    }
                }
                else
                {
                    GiveItem1(c1, @q_grd_basilisk_talon, 1);
                    if (OwnItemCount(c1, @q_grd_basilisk_talon) >= 100)
                    {
                        SoundEffect(c1, "ItemSound.quest_middle");
                    }
                    else
                    {
                        SoundEffect(c1, "ItemSound.quest_itemget");
                    }
                }
            }
        }

        super;
    }
}
