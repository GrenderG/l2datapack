class thrill_sucker : warrior_aggressive
{
handler:
    EventHandler MY_DYING(c1)
    {
        c1 = GetLastAttacker();
        if (HaveMemo(myself.c_quest0, @path_to_darkwizard) == 1 && OwnItemCount(myself.c_quest0, @candle) == 1 && myself.i_quest0 == 1 && OwnItemCount(myself.c_quest0, @knee_bone) < 2)
        {
            if (Rand(2) == 0)
            {
                GiveItem1(myself.c_quest0, @knee_bone, 1);
                if (OwnItemCount(myself.c_quest0, @knee_bone) == 2)
                {
                    SoundEffect(myself.c_quest0, "ItemSound.quest_middle");
                }
                else
                {
                    SoundEffect(myself.c_quest0, "ItemSound.quest_itemget");
                }
            }
        }

        c1 = GetLastAttacker();
        if (HaveMemo(c1, @trial_of_reformer) == 1 && GetMemoState(c1, @trial_of_reformer) == 16 && OwnItemCount(c1, @bone_fragment7) == 0)
        {
            GiveItem1(c1, @bone_fragment7, 1);
            SoundEffect(c1, "ItemSound.quest_itemget");
            if (OwnItemCount(c1, @bone_fragment4) >= 1 && OwnItemCount(c1, @bone_fragment5) >= 1 && OwnItemCount(c1, @bone_fragment6) >= 1 && OwnItemCount(c1, @bone_fragment8) >= 1)
            {
                SetMemoState(c1, @trial_of_reformer, 17);
            }
        }

        super;
    }

    EventHandler ATTACKED(attacker, damage)
    {
        select (myself.i_quest0)
        {
        case 0:
            myself.c_quest0 = attacker;
            myself.i_quest0 = 1;
            break;
        case 1:
            if (myself.c_quest0 != attacker)
            {
                myself.i_quest0 = 2;
            }

            break;
        case 2:
            break;
        }

        super;
    }
}
